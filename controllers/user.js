const User = require("../models/user");
const sharp = require("sharp");
const nodemailer = require("nodemailer");
const randomstring = require("randomstring");
const crypto = require("crypto");
const validator = require("validator");
const jwt = require("jsonwebtoken");

//Create a new user
const createUser = async (req, res) => {
  try {
    const {
      name,
      course,
      mobile,
      email,
      qualification,
      certified,
      address,
      coursefee,
      paymenttype,
      coursestart,
      courseend,
    } = req.body;
    if (
      !name ||
      !course ||
      !mobile ||
      !email ||
      !qualification ||
      !address ||
      !coursefee ||
      !paymenttype ||
      !coursestart ||
      !courseend
    ) {
      return res.status(400).json("All fields are required");
    }
    if (!req.file) {
      return res.status(400).json("Image is required");
    }
    if (!validator.isEmail(email)) {
      return res.status(400).json("Invalid email address");
    }
    if (!/^[0-9]{10}$/.test(mobile)) {
      return res.status(400).json("Invalid phone number");
    }
    const userExists = await User.findOne({ $or: [{ email }, { mobile }] });
    if (userExists) {
      if (userExists.email === email) {
        return res.status(400).json("Email address is already registered");
      } else {
        return res.status(400).json("Phone number is already registered");
      }
    }
    const user = new User({
      name,
      course,
      mobile,
      email,
      qualification,
      certified,
      address,
      coursefee,
      paymenttype,
      coursestart,
      courseend,
      image: {
        data: await sharp(req.file.buffer).resize(200).toBuffer(),
        contentType: req.file.mimetype,
      },
    });
    const password = randomstring.generate(6);
    user.password = password;
    user.confirmpassword = password;

    await user.save();
    const transporter = nodemailer.createTransport({
      service: "Gmail",
      auth: {
        user: process.env.Email,
        pass: process.env.Email_Pass,
      },
    });

    const mailOptions = {
      from: process.env.Email_From,
      to: user.email,
      subject: "Welcome to Blueskies Academy!",
      html: `
        <html>
          <head>
            <style>
            body {
              font-family: Arial, sans-serif;
              font-size: 16px;
              line-height: 1.5;
              background-color: #f4f4f4;
              padding: 20px;
            }
            .container {
              max-width: 600px;
              margin: 0 auto;
              background-color: #fff;
              padding: 30px;
              border-radius: 5px;
              box-shadow: 0 0 10px rgba(0,0,0,0.1);
            }
              h1 {
                color: #333;
                text-align: center;
              }
              p {
                
                color: #555;
                margin-bottom: 20px;
                line-height: 1.5;
                margin: 20px 0;
              }
              b{
                color: #333;
                font-size:14px
                
              }
              a {
                background-color: #EF834B;
                color: white;
                display: inline-block;
                padding: 10px 20px;
                border-radius: 5px;
                text-decoration: none;
                margin-top: 20px;
              }
              a:hover {
                background-color: #BF4F0A;
              }
            </style>
          </head>
          <body>
            <div class="container">
              <h1>Welcome to Blueskies Academy!</h1>
              <p>Hi ${user.name},</p>
              <p>Your account has been created by an admin, and we're excited to have you onboard!</p>
              <p>Your autogenerated password is: <b>${password}</b></p>
              <p>To get started, please click on the link below to join:</p>
              <a href="${process.env.CLIENT_URL}/StudentLogin">Join Now</a>
              <p>We look forward to seeing you on our site!</p>
              <p>Best regards,</p>
              <p>Blueskies Academy</p>
            </div>
          </body>
        </html>
      `,
    };

    await transporter.sendMail(mailOptions);
    res.json("Successfully created");
  } catch (error) {
    console.error(error);
    res.status(500).json("Something went wrong");
  }
};

//getUserAdminPanel
const getAllUsers = async (req, res) => {
  try {
    const users = await User.find();

    res.status(200).json(users);
  } catch (err) {
    console.error(err);
    res.status(500).json("Something went wrong");
  }
};

//getSingleUser
const getSingleUser = async (req, res) => {
  try {
    const token = req.headers.authorization.split(" ")[1];
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    const userId = decoded.id;
    const user = await User.findById(userId);
    res.json(user);
  } catch {
    res.status(500).json("Something went wrong");
  }
};

const getStudentById = async (req, res) => {
  try {
    const studentId = req.params.studentId;
    const user = await User.findOne({ studentid: studentId });
    res.json(user);
  } catch {
    res.status(500).json("Something went wrong");
  }
};

//login
const Login = async (req, res) => {
  const { email, password } = req.body;

  try {
    const user = await User.findOne({ email });
    if (!user) {
      return res.status(400).send({ error: "Login failed. Email not found." });
    }

    const isMatch = await user.comparePassword(password);
    if (!isMatch) {
      return res
        .status(400)
        .send({ error: "Login failed. Incorrect password." });
    }

    const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, {
      expiresIn: "1d",
    });
    res.send({ token });
  } catch (error) {
    res.status(400).send({ error: "Login failed. Please try again." });
  }
};

//Logout
const Logout = async (req, res) => {
  const token = req.headers.authorization.split(" ")[1];
  if (!token) return res.status(401).send("Access Denied");

  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    decoded.exp = Math.floor(Date.now() / 1000) - 10;
    const expiredToken = jwt.sign(decoded, process.env.JWT_SECRET);

    res.send({
      message: "Token has been expired",
      expiredToken,
    });
  } catch (error) {
    res.status(400).send("Invalid Token");
  }
};

//forgotpassword
const forgotpassword = async (req, res) => {
  const email = req.body.email;
  const id = req.params.id;

  if (id !== "student") {
    return res.status(403).json({ message: "Forbidden" });
  }

  const user = await User.findOne({ email: email });

  if (!user) {
    return res.status(404).json({ message: "Email not registered" });
  }

  const token = crypto.randomBytes(20).toString("hex");
  user.resetPasswordToken = token;
  user.resetPasswordExpires = Date.now() + 3600000;

  try {
    await user.save();

    const transporter = nodemailer.createTransport({
      service: "gmail",
      auth: {
        user: process.env.Email,
        pass: process.env.Email_Pass,
      },
    });

    const mailOptions = {
      from: process.env.Email_From,
      to: email,
      subject: "Blueskies Academy",
      html: `
        <html>
        <head>
          <style>
            /* Add some style to the email */
            body {
              font-family: Arial, sans-serif;
              font-size: 16px;
              line-height: 1.5;
              background-color: #f4f4f4;
              padding: 20px;
            }
            .container {
              max-width: 600px;
              margin: 0 auto;
              background-color: #fff;
              border-radius: 5px;
              box-shadow: 0 0 10px rgba(0,0,0,0.1);
            }
            .header {
              color: #333;
              text-align: center;
              padding: 10px;
            }
            .content {
              padding: 10px;
            }
            .button {
              background-color: #EF834B;
              border: none;
              color: white;
              padding: 15px 32px;
              text-align: center;
              text-decoration: none;
              display: inline-block;
              font-size: 16px;
              margin: 4px 2px;
              cursor: pointer;
              border-radius: 10px;
            }
            .footer {
              background-color: #f2f2f2;
              padding: 10px;
            }
          </style>
        </head>
        <body>
        <div class="container">
          <div class="header">
            <h1>Reset your password</h1>
          </div>
          <div class="content">
            <p>Hello ${user.name},</p>
            <br />
            <p>You are receiving this email because you (or someone else) has requested a password reset for your account.</p>
            <p>Please click on the following button to reset your password:</p>
            <a href="${process.env.CLIENT_URL}/resetpassword/${token}">
              <button class="button">Reset password</button>
            </a>
            <br />
            <p>If you did not request this, please ignore this email and your password will remain unchanged.</p>
          </div>
          <div class="footer">
            <p>Best regards,</p>
            <p>Blueskies Academy</p>
          </div>
          </div>
        </body>
        </html>
      `,
    };

    transporter.sendMail(mailOptions, function (error, info) {
      if (error) {
        console.log(error);
        return res
          .status(500)
          .json({ message: "Failed to send reset password email" });
      } else {
        return res
          .status(200)
          .json({ message: "Password reset email sent", token: token });
      }
    });
  } catch (error) {
    console.log(error);
    return res
      .status(500)
      .json({ message: "Failed to save reset password token" });
  }
};

//ResetToken
const resettoken = async (req, res) => {
  const { token } = req.params;
  const { password, confirmpassword } = req.body;

  try {
    const user = await User.findOne({
      resetPasswordToken: token,
      resetPasswordExpires: { $gt: Date.now() },
    });

    if (!user) {
      return res
        .status(400)
        .json({ message: "Password reset token is invalid or has expired" });
    }

    user.password = password;
    user.confirmpassword = confirmpassword;
    if (password != confirmpassword) {
      return res.status(200).json({ message: "Password not matched" });
    } else {
      user.resetPasswordToken = undefined;
      user.resetPasswordExpires = undefined;
      await user.save();
      return res.status(200).json({ message: "Password reset successful" });
    }
  } catch (error) {
    console.log(error);
    return res.status(500).json({ message: "Failed to reset password" });
  }
};

//Delete
const deleteUser = async (req, res) => {
  try {
    const { id } = req.params;
    const user = await User.findOneAndDelete({ studentid: id });
    if (!user) {
      return res.status(404).json("User not found");
    }
    res.json("Successfully deleted");
  } catch (error) {
    console.error(error);
    res.status(500).json("Something went wrong");
  }
};

const deletemultiple = async (req, res) => {
  try {
    const idsToDelete = req.body.ids;
    const result = await User.deleteMany({ _id: { $in: idsToDelete } });
    res.json({ success: true, deletedRowsCount: result.deletedCount });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: "An error occurred while deleting users" });
  }
};

//update
const editUser = async (req, res) => {
  try {
    const { id } = req.params;
    const {
      name,
      course,
      mobile,
      email,
      qualification,
      certified,
      address,
      coursefee,
      paymenttype,
      coursestart,
      courseend,
    } = req.body;

    if (
      !name ||
      !course ||
      !mobile ||
      !email ||
      !qualification ||
      !address ||
      !coursefee ||
      !paymenttype ||
      !coursestart ||
      !courseend
    ) {
      return res.status(400).json("All fields are required");
    }
    if (!validator.isEmail(email)) {
      return res.status(400).json("Invalid email address");
    }
    if (!/^[0-9]{10}$/.test(mobile)) {
      return res.status(400).json("Invalid phone number");
    }

    let image = {};
    if (req.file) {
      image = {
        data: await sharp(req.file.buffer).resize(200).toBuffer(),
        contentType: req.file.mimetype,
      };
    } else {
      const user = await User.findOne({ studentid: id });
      image = user.image;
    }

    const user = await User.findOneAndUpdate(
      { studentid: id },
      {
        name,
        course,
        mobile,
        email,
        qualification,
        certified,
        address,
        coursefee,
        paymenttype,
        coursestart,
        courseend,
        image,
      },
      { new: true }
    );
    if (!user) {
      return res.status(404).json("User not found");
    }
    res.json("Successfully updated");
  } catch (error) {
    console.error(error);
    res.status(500).json("Something went wrong");
  }
};

//changepassword
const ChangePassword = async (req, res) => {
  try {
    const token = req.headers.authorization.split(" ")[1];
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    const userId = decoded.id;
    const user = await User.findById(userId);
    if (!user) return res.status(404).send({ message: "User not found" });
    if (!req.body.oldpassword) {
      return res.status(400).send({ error: "Please fill old password" });
    } else if (!req.body.newpassword) {
      return res.status(400).send({ error: "Please fill new password" });
    } else if (!req.body.newconfirmpassword) {
      return res.status(400).send({ error: "Please fill Confirm password" });
    } else {
      if (req.body.oldpassword === user.confirmpassword) {
        if (req.body.newpassword !== req.body.newconfirmpassword) {
          res.json("Password doesnt match");
        } else {
          await User.findOneAndUpdate(
            (user.password = req.body.newpassword),
            (user.confirmpassword = req.body.newpassword)
          );
          res.json("Password successfully changed");
          user.save();
        }
      } else {
        return res.status(400).send({ error: "old password is incorrect" });
      }
    }
  } catch (err) {
    res.json("error");
    console.log(err);
  }
};

const addstudymaterial = async (req, res) => {
  try {
    const courseType = req.body.courseType;
    const studyMaterials = req.files.map((file) => ({
      name: file.originalname,
      contentType: file.mimetype,
      data: file.buffer,
    }));

    const users = await User.find({ course: courseType });
    for (const user of users) {
      for (const studyMaterial of studyMaterials) {
        if (
          !user.studyMaterials.find((file) => file.name === studyMaterial.name)
        ) {
          user.studyMaterials.push(studyMaterial);
        }
      }
      await user.save();
    }
    res.status(200).json({ message: "Study materials uploaded successfully" });
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: "Something went wrong" });
  }
};

const deleteStudyMaterial = async (req, res) => {
  try {
    const token = req.headers.authorization.split(" ")[1];
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    const userId = decoded.id;
    const user = await User.findById(userId);
    if (!user) return res.status(404).send({ message: "User not found" });
    const materialId = req.params.id;
    const materialIndex = user.studyMaterials.findIndex(
      (file) => file._id.toString() === materialId
    );
    if (materialIndex !== -1) {
      user.studyMaterials.splice(materialIndex, 1);
      await user.save();
      res.status(200).json({ message: "Study material deleted successfully" });
    } else {
      res.status(404).json({ message: "Study material not found" });
    }
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: "Something went wrong" });
  }
};

//addcertificate
const addcertificate = async (req, res) => {
  try {
    const studentid = req.body.studentid;
    const certificate = req.files.map((file) => ({
      name: file.originalname,
      contentType: file.mimetype,
      data: file.buffer,
    }));

    const users = await User.find({ studentid: studentid });
    for (const user of users) {
      for (const studyMaterial of certificate) {
        if (
          !user.certificates.find((file) => file.name === studyMaterial.name)
        ) {
          user.certificates.push(studyMaterial);
        }
      }
      await user.save();
    }
    res.status(200).json({ message: "Certificates uploaded successfully" });
  } catch {
    res.status(500).json("Something went wrong");
  }
};

const getstudymaterial = async (req, res) => {
  try {
    const token = req.headers.authorization.split(" ")[1];
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    const userId = decoded.id;
    const courseType = req.params.courseType;
    const user = await User.findOne({ userId, course: courseType });

    if (!user) {
      return res.status(404).json({ message: "User not found" });
    }

    const materials = user.studyMaterials.map((material) => {
      return {
        id: material._id,
        name: material.name,
        data: material.data.toString("base64"),
      };
    });

    res.status(200).json({ studyMaterials: materials });
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: "Something went wrong" });
  }
};

const getCourseCertificate = async (req, res) => {
  try {
    const token = req.headers.authorization.split(" ")[1];
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    const userId = decoded.id;
    const user = await User.findById(userId);
    if (!user) return res.status(404).send({ message: "User not found" });

    const materials = user.certificates.map((material) => {
      return {
        id: material._id,
        name: material.name,
        data: material.data.toString("base64"),
      };
    });

    res.status(200).json({ certificates: materials });
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: "Something went wrong" });
  }
};

const deleteCourseCertificate = async (req, res) => {
  try {
    const id = req.params.id;
    const user = await User.findOne({ studentid: id });
    if (!user) return res.status(404).send({ message: "User not found" });
    const materialId = req.params.certificateid;
    const materialIndex = user.certificates.findIndex(
      (file) => file._id.toString() === materialId
    );
    if (materialIndex !== -1) {
      user.certificates.splice(materialIndex, 1);
      await user.save();
      res
        .status(200)
        .json({ message: "Course certificate deleted successfully" });
    } else {
      res.status(404).json({ message: "Certificate not found" });
    }
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: "Something went wrong" });
  }
};

module.exports = {
  createUser,
  Login,
  Logout,
  getAllUsers,
  getSingleUser,
  editUser,
  deleteUser,
  deletemultiple,
  ChangePassword,
  getStudentById,
  addstudymaterial,
  getstudymaterial,
  getCourseCertificate,
  forgotpassword,
  resettoken,
  addcertificate,
  deleteStudyMaterial,
  deleteCourseCertificate,
};
